import rclpy
from rclpy.node import Node
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point
import math

class ToFVisualizer(Node):
    def _init_(self):
        super()._init_('tof_visualizer')

        # Create publisher for RViz markers
        self.publisher = self.create_publisher(Marker, 'visualization_marker', 10)
        self.timer = self.create_timer(1.0, self.publish_marker)

        # Example closed path (replace with actual ToF and stepper data)
        self.tof_data = [
            (0, 1.0), (45, 1.5), (90, 1.2), (135, 1.3), (180, 1.0),
            (225, 0.8), (270, 1.1), (315, 1.4), (360, 1.0)
        ]

    def publish_marker(self):
        marker = Marker()
        marker.header.frame_id = "map"  # Set frame (must match RViz)
        marker.header.stamp = self.get_clock().now().to_msg()
        marker.ns = "tof_path"
        marker.id = 0
        marker.type = Marker.LINE_STRIP
        marker.action = Marker.ADD

        marker.scale.x = 0.05  # Line width
        marker.color.a = 1.0  # Alpha (opacity)
        marker.color.r = 0.0  # Red
        marker.color.g = 1.0  # Green
        marker.color.b = 0.0  # Blue

        # Convert ToF + Stepper angles to 3D points
        for angle, distance in self.tof_data:
            p = Point()
            rad = math.radians(angle)
            p.x = distance * math.cos(rad)
            p.y = distance * math.sin(rad)
            p.z = 0.0  # Adjust if needed
            marker.points.append(p)

        self.publisher.publish(marker)
        self.get_logger().info("Published ToF path to RViz")

def main(args=None):
    rclpy.init(args=args)
    node = ToFVisualizer()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if _name_ == '_main_':
    main()
